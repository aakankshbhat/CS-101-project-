def find_splice(dna_motif, dna):
    #Function takes in two strings
    index_list = []
    list_characters = []
    if len(dna_motif) == 0:
        return []
    for letter in dna_motif:
        list_characters.append(letter) #Creates a list of letters needed
    for count in range(len(list_characters)):
        element = list_characters[count]
        try:
            index = dna.index(element)
            dna = dna[index+1:] #Restructure the string to beyond the index that we just checked
            if count == 0:
                index_list.append(index) #Index of the first is the normal index
            else:
                index_list.append(index + index_list[count-1] + 1) #Index of subsequent strings is influenced by the substring being created
        except ValueError:
            return []
    if len(index_list) != len(list_characters):
        return []
    return index_list
    
def shared_motif(dna_list):
        motif = '' #will add common letters as they are found
        dna_string = dna_list[-1] #last string in dna_list
        dnastring_len = len(dna_list[-1])+1 #add one for inclusivity purposes
        for i in range(dnastring_len): 
            for k in range((dnastring_len)-i): #new range taking into account already tested indices
                j = i+k 
                # k = change in index value from start to end of shared motif
                #j represents end index value of motif
                string = dna_string[i:j] 
                for index in dna_list:
                    if all(string in index for index in dna_list) == True: #all function returns true if in string in all indices
                        if k > len(motif): #can't be equal to len(motif)
                            motif = string
                        if all(string in index for index in dna_list) == False: #case with no common substrings
                            motif = ""
        return motif

#inspiration from dynamic programming on wikipedia and algorithms.tutorialhorizon

#inspiration from https://www.programiz.com/python-programming/methods/built-in/all




dna_dict={}

def get_edges(dna_dict):
        list1=[]
        element_list1 = dna_dict.keys()
        for j in element_list1:
            list1.append(j) #transferring elements from the dictionary to list 1
        list2=[]
        for k in range(0,len(list1)):
            for l in range(0,len(list1)):
                
                #a string can not be adjacent to itself
                if k==l:
                    break  
                    
                #if three-character suffix of a string matches with three-character prefix of another string, then append to list2
                if (dna_dict[list1[k]][-3:]==dna_dict[list1[l]][:3]):
                     list2.append((list1[k],list1[l]))
                if(dna_dict[list1[k]][:3]==dna_dict[list1[l]][-3:]):
                    list2.append((list1[l],list1[k]))  
                                      
        return list2

adjacency_list1=get_edges(dna_dict)
print(adjacency_list1)

#inspiration from https://open.oregonstate.education/computationalbiology/chapter/dictionaries/


def assemble_genome(dna_list):
    shortest_string = []
    index = 0
    while index < (len(dna_list)):
        string = dna_list[index]
        go_to_next_string = False
        if len(dna_list) == 1:
            shortest_string.append(string)
            break
        for i in range(len(string)):
            if len(string) == 1:
                if string in shortest_string:
                    index = index + 1
                    break
                else:
                    shortest_string.append(string)
                    index = index + 1
                    break
            if i == 0:
                shortest_string.append(string[i])
                continue
            if i == len(string):
                shortest_string.append(string[i])
                break
            count = 0
            gone_through_loop = False
            for element in dna_list:
                if element == string:
                    count = count + 1
                    continue
                if string[i] == element[0]:
                    if string[i:] in element:
                        shortest_string.append(string[i:-1])
                        length = len(string[i:])
                        for j in range(length):
                            if string[i+j:] in element:
                                for genome in dna_list:
                                    if string[i+j:] in genome:
                                        if len(dna_list) == 2:
                                            shortest_string.remove(shortest_string[-1])
                                            break
                                        else:
                                            if genome == element:
                                                continue
                                            else:
                                                shortest_string[i] = shortest_string[i][:i+j]
                                                break
                                                print(string[i+j:])
                                if len(dna_list) == 2:
                                    shortest_string.append(element)
                                    dna_list.remove(element)
                                else:
                                    dna_list.remove(element)
                            break
                    go_to_next_string = True
                    dna_list.remove(string)
                    index = 0 #make index 0 so it goes through the whole loop again
                    break
                count = count + 1
                if count == len(dna_list):
                    gone_through_loop = True
            if gone_through_loop == True:
                shortest_string.append(string[i])
                count = 0
            if go_to_next_string == True:
                count = 0
                break
            if len(shortest_string) > 4*len(string):
                return "Infinite loop"
    shortest_string = "".join(shortest_string)
    return shortest_string
    
import math

def perfect_match(rna): 
    number_C = rna.count("C")
    number_G = rna.count("G")
    number_U = rna.count("U")
    number_A = rna.count("A")
    if number_C == number_G: #below if statements find the number of GC and UA pairs
        matches_GC = number_C
    if number_C != number_G:
        matches_GC = 0
    if number_U == number_A: 
        matches_UA = number_U
    if number_C != number_G:
        matches_UA = 0
    if matches_GC and matches_UA != 0:
        number_matches =  (math.factorial(matches_UA)*math.factorial(matches_GC)) 
    else:   #can't use factorial since 0! is equal to one
        number_matches = 0
    return number_matches
        
    #number of perfect matches is equal to matches_UA! * matches_GC!
   
from math import log10

dna=""
gc_content=[]
def random_genome(dna, gc_content):
    CG = len(dna.replace('A', '').replace('T', '')) #calculating length of dna string, which contains only 'C's and 'G's, after removing 'A's and 'T's   
    AT = len(dna.replace('C', '').replace('G', '')) #calculating length of dna string, which contains only 'A's and 'T's, after removing 'C's and 'G's  
    result_list= []
    x=0
    while x<len(gc_content):
        probability= (CG * log10(float(gc_content[x])/2)) + (AT * log10((1-float(gc_content[x]))/2)) #calculating the common log of the probability that the string made with gc_content will match the dna string
        result_list.append(round(probability, 3))#rounding the probabilities to 3 decimal places
        x=x+1
    return result_list
answer=random_genome(dna,gc_content)
print(answer)

#the reverse_complement function is the same code from milestone 1
#finding the complement string of a given DNA string
def reverse_complement(dna):
    #reverse dna string
    dna_reverse = dna[::-1]
    dna_complement = ''
    #each letter in the reverse string is replaced with complement letter
    #all is added to a new string (dna_complement)
    for symbol in dna_reverse:
        if symbol == 'A':
            dna_complement += 'T'
        elif symbol == 'T':
            dna_complement += 'A'
        elif symbol == 'C':
            dna_complement += 'G'
        else:
            dna_complement += 'C'
    return dna_complement

#finds out if a sub-string in DNA is a reverse palindrome
def rev_palindrome(dna):
    palindromes= []
    for n in range(len(dna)): #the starting position must be within the DNA string
        for i in range(4,13): #the length of the tuple must be between 4 and 12
            dna_pal= dna[n:(n+i)] #DNA substring
            rev_comp_pal= reverse_complement(dna_pal) #reverse complement to DNA substring
            #a starting position of 3 before the end of the string cannot produce tuple with minimum of 4 letters
            if n == (len(dna)-3):
                break
            #the starting position plus the length of the sub-string cannot be longer than the entire length of the DNA string
            if (n+i) > len(dna):
                break
            #if both the DNA substring and reverse complement are the same, they are reverse palindromes
            if dna_pal == rev_comp_pal:
                position= n
                length= i
                palindromes.append((position,length))
    return palindromes
